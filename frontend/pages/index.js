import Head from 'next/head'
import { useState, useEffect } from 'react'
import { ethers } from 'axios'
import axios from 'axios'
import { memberNFTAddress, tokenBankAddress } from '../../contracts'
import MemberNFT from '../contracts/MemberNFT.json'
import TokenBank from '../contracts/TokenBank.json'

// import Image from 'next/image'

export default function Home() {
  const [account, setAccount] = useState("");//[現在値、更新値]＝初期値
  const [chainId, setChainId] = useState(false);
  const [tokenBalance, setTokenBalance] = useState("");
  const [bankBalance, setBankBalance] = useState("");
  const [bankTotalDeposit, setBankTotalDeposit] = useState("");
  const [nftOwner, setNftOwner] = useState(false);
  const [inputData, setInputData] = useState({
    transferAddress: "",
    transferAmount: "",
    depositAmount: "",
    withdrawAmount: "",
  });
  const [items, setItems] = useState([]);
  const rinkebyId = "0x4";
  const zeroAddress = "0x0000000000000000000000000000000000000000";

  const checkMetaMaskInstalled = async () => {
    const { ethereum } = window;
    if (!ethereum) {
      alert('MetaMaskをインストールしてください')
    }
  }

  //②
  const checkChainId = async () => {
    const { ethereum } = window;
    if (ethereum) {
      const chain = await ethereum.request({
        method: 'eth_chainId'
      });
      console.log(`chain: ${chain}`);

      if (chain != rinkebyId) {
        alert('Rinkebyに接続してください!');
        return
      } else {
        setChainId(true)
      }
    }
  }

  const connectWallet = async () => {
    try {
      const { ethereum } = window;
      const accounts = await ethereum.request({
        method: 'eth_requestAccounts'
      });
      console.log(`account: ${accounts[0]}`)
      setAccount(accounts[0])

      ethereum.on('accountsChanged', checkAccountChanged);//①
      ethereum.on('chainChanged', checkChainId);//②
    } catch (err) {
      console.log(err)
    }
  }

  //①ハンドラー関数  chainId以外初期化
  const checkAccountChanged = () => {
    setAccount('');
    setNftOwner(false);
    setItems([]);
    setTokenBalance('');
    setBankBalance('');
    setBankTotalDeposit('');
    setInputData({
      transferAddress: "",
      transferAmount: "",
      depositAmount: "",
      withdrawAmount: "",
    });
  }

    useEffect(() => {
      checkMetaMaskInstalled();
      checkChainId()
    }, []);


  // 以下、フロントエンド
  return (
    <div
      className={
        "flex flex-col items-center bg-slate-100 text-blue-900 min-h-screen"
      }
    >
      <Head>
        <title>Token DApp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h2 className={"text-6xl font-bold my-12 mt-8"}>
        トークンコミュニティへようこそ！
      </h2>
      <div className="mt-8 mb-16 hover:rotate-180 hover:scale-105 transition duration-700 ease-in-out">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="160"
          height="160"
          viewBox="0 0 350 350"
        >
          <polygon
            points="0 0, 175 0, 175 175, 0 175"
            stroke="black"
            fill="#0000ff"
          />
          <polygon
            points="0 175, 175 175, 175 350, 0 350"
            stroke="black"
            fill="#ffc0cb"
          />
          <polygon
            points="175 0, 350 0, 350 175, 175 175"
            stroke="black"
            fill="#90EE90"
          />
          <polygon
            points="175 175, 350 175, 350 350, 175 350"
            stroke="black"
            fill="#ffff00"
          />
        </svg>
      </div>
      <div className={"flex mt-1"}>
        {/* 参考演算子 */}
        {/* 条件が正なら左、負なら右 */}
        {/* accountが体ったらボタンを表示。空じゃなければ何も表示しない「MetaMask接続のボタンを消す」 */}
        {account === "" ? (
          <button
            className={
              "bg-transparent text-blue-700 font-semibold py-2 px-4 border border-blue-500 rounded hover:border-transparent hover:text-white hover:bg-blue-500 hover:cursor-pointer"
            }
            onClick={connectWallet}
          >
            MetaMaskを接続
          </button>
        ) : (
          <></>
        )}
      </div>
    </div>
  );
}
